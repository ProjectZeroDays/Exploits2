------------------------------------------------------------------------
Reflected Cross-Site Scripting vulnerability in MailPoet Newsletters
plugin
------------------------------------------------------------------------
Sipke Mellema, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A Cross-Site Scripting vulnerability was found in the MailPoet
Newsletters plugin. This issue allows an attacker to perform a wide
variety of actions, such as stealing Administrators' session tokens, or
performing arbitrary actions on their behalf. In order to exploit this
issue, the attacker has to lure/force a logged on WordPress
Administrator into opening a URL provided by an attacker.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160721-0002

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was successfully tested on MailPoet Newsletters version
2.7.2.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
This issue is resolved in MailPoet Newsletters version 2.7.3.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
https://sumofpwn.nl/advisory/2016/reflected_cross_site_scripting_vulnerability_in_mailpoet_newsletters_plugin.html

The controller front_subscribers allows for the creation of custom forms trough the wysija_outter method, and can be called by anyone. This is also clear from the method's description:
handles the form generation in iframe mode, basically wysija's iframes call that action to generate the html of the body

Multiple parameters can be used to pass the form content, such as encodedForm. The code expects a base64 encoded json string. Values from the json string will be passed to WYSIJA_NL_Widget::widget, where the code performs the extract method in the json variables. This is dangerous since is allows the user to overwrite any variable. The variable after_widget is used in the form without output encoding.

$output .= $after_widget;
[..]
if ( isset( $this->core_only ) && $this->core_only ) {
   return $output;
} else {
   echo $output;
}

Proof of concept


Have an authenticated admin visit the URL:
/?wysija-page=1&controller=subscribers&action=wysija_outter&encodedForm=eyJmb3JtIjoiUHduIiwiYWZ0ZXJfd2lkZ2V0IjoiPHNjcmlwdD5hbGVydCgnc3Vtb2Zwd24ubmwnKTwvc2NyaXB0PiJ9

The encodedForm parameter is the base64 encoded string:
{"form":"Pwn","after_widget":"<script>alert('sumofpwn.nl')</script>"}

A pop-up box should appear, meaning the JavaScript contained in the request_id request parameter was executed by the browser.


------------------------------------------------------------------------
Summer of Pwnage (https://sumofpwn.nl) is a Dutch community project. Its
goal is to contribute to the security of popular, widely used OSS
projects in a fun and educational way.
